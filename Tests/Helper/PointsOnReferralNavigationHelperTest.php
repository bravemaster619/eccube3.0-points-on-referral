<?php

namespace Eccube\Tests\Helper;

use Eccube\Tests\EccubeTestCase;
use Plugin\PointsOnReferral\Helper\PointsOnReferralHelper;
use Plugin\PointsOnReferral\Helper\PointsOnReferralNavigationHelper;
use Symfony\Component\BrowserKit\Cookie;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;

class PointsOnReferralNavigationHelperTest extends EccubeTestCase {

    protected $Helper;

    public function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->Helper = new PointsOnReferralNavigationHelper($this->app);
    }

    public function testGetNavHtml() {
        $client = $this->createClient();
        $this->logIn($client);
        $html = $client->request('GET', $this->app['url_generator']->generate('mypage'))->html();
        $navHtml = $this->Helper->getNavHtml($html);
        $this->assertTrue(PointsOnReferralHelper::endsWith($navHtml, "</ul>"), "Navbar html should be ending with a closing ul tag");
    }

    public function testAddLink() {
        $client = $this->createClient();
        $this->logIn($client);
        $html = $client->request('GET', $this->app['url_generator']->generate('mypage'))->html();
        $html_link_added = $this->Helper->addLink($html);
//        echo $this->Helper->getNavHtml($html_link_added);
        $this->assertNotEmpty($this->Helper->getNavHtml($html_link_added), "A nav link should be appended");
    }

    public function testAddLinkJavascript() {
        $html = $this->createClient()->request('GET', $this->app['url_generator']->generate('mypage'))->html();
        $html = "<body></body>";
        $html_link_added = $this->Helper->addLink($html);
//        echo $html_link_added;
        $this->assertNotEmpty(strpos($html_link_added, "<script>"), "Script tag should be appended");
    }

    public function logIn($client) {
        $firewall = 'customer';

        $user = $this->createCustomer();
        $token = new UsernamePasswordToken($user, null, $firewall, array('ROLE_USER'));

        $this->app['security.token_storage']->setToken($token);
        $this->app['session']->set('_security_' . $firewall, serialize($token));
        $this->app['session']->save();

        $cookie = new Cookie($this->app['session']->getName(), $this->app['session']->getId());
        $client->getCookieJar()->set($cookie);
        return $user;
    }

}
